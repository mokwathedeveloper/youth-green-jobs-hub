# Generated by Django 5.2.6 on 2025-09-19 10:10

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(help_text='Icon name or emoji for the badge', max_length=50)),
                ('color', models.CharField(default='#4CAF50', help_text='Hex color code for the badge', max_length=7)),
                ('category', models.CharField(choices=[('waste_collection', 'Waste Collection'), ('marketplace', 'Marketplace'), ('community', 'Community'), ('environmental', 'Environmental Impact'), ('achievement', 'Special Achievement'), ('milestone', 'Milestone')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('points_required', models.PositiveIntegerField(default=0, help_text='Minimum points required to earn this badge')),
                ('conditions', models.JSONField(default=dict, help_text='Conditions that must be met to earn this badge')),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden badges are not shown until earned')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['category', 'points_required', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('leaderboard_type', models.CharField(choices=[('points', 'Total Points'), ('waste_collected', 'Waste Collected'), ('orders', 'Orders Placed'), ('events', 'Events Attended'), ('streak', 'Current Streak'), ('badges', 'Badges Earned')], max_length=20)),
                ('period', models.CharField(choices=[('all_time', 'All Time'), ('yearly', 'Yearly'), ('monthly', 'Monthly'), ('weekly', 'Weekly'), ('daily', 'Daily')], default='all_time', max_length=20)),
                ('max_entries', models.PositiveIntegerField(default=100)),
                ('is_active', models.BooleanField(default=True)),
                ('snapshot_data', models.JSONField(default=list, help_text='Cached leaderboard data')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Leaderboard',
                'verbose_name_plural': 'Leaderboards',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('requirements', models.JSONField(default=dict, help_text='Requirements to complete the challenge')),
                ('points_reward', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('max_participants', models.PositiveIntegerField(blank=True, help_text='Maximum number of participants (null for unlimited)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('badge_reward', models.ForeignKey(blank=True, help_text='Badge awarded for completing this challenge', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.badge')),
            ],
            options={
                'verbose_name': 'Challenge',
                'verbose_name_plural': 'Challenges',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('points_earned', models.PositiveIntegerField(default=0, help_text='Points earned when this badge was awarded')),
                ('source_type', models.CharField(help_text='Type of action that earned this badge', max_length=50)),
                ('source_id', models.CharField(blank=True, help_text='ID of the specific action/object that earned this badge', max_length=100)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.badge')),
            ],
            options={
                'verbose_name': 'User Badge',
                'verbose_name_plural': 'User Badges',
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('current_level', models.PositiveIntegerField(default=1)),
                ('points_to_next_level', models.PositiveIntegerField(default=100)),
                ('current_streak_days', models.PositiveIntegerField(default=0)),
                ('longest_streak_days', models.PositiveIntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('total_waste_collected_kg', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('total_orders_placed', models.PositiveIntegerField(default=0)),
                ('total_events_attended', models.PositiveIntegerField(default=0)),
                ('total_referrals', models.PositiveIntegerField(default=0)),
                ('show_on_leaderboard', models.BooleanField(default=True)),
                ('receive_achievement_notifications', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('badges_earned', models.ManyToManyField(blank=True, through='gamification.UserBadge', to='gamification.badge')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gamification_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.AddField(
            model_name='userbadge',
            name='user_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.userprofile'),
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('points', models.IntegerField(help_text='Points gained (positive) or lost (negative)')),
                ('transaction_type', models.CharField(choices=[('earned', 'Earned'), ('spent', 'Spent'), ('bonus', 'Bonus'), ('penalty', 'Penalty'), ('adjustment', 'Adjustment')], max_length=20)),
                ('source', models.CharField(help_text='Source of the points (waste_report, order, event, etc.)', max_length=100)),
                ('source_id', models.CharField(blank=True, help_text='ID of the specific source object', max_length=100)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_transactions', to='gamification.userprofile')),
            ],
            options={
                'verbose_name': 'Point Transaction',
                'verbose_name_plural': 'Point Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user_profile', 'badge')},
        ),
        migrations.CreateModel(
            name='ChallengeParticipation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('progress', models.JSONField(default=dict, help_text='Current progress towards challenge completion')),
                ('is_completed', models.BooleanField(default=False)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='gamification.challenge')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.userprofile')),
            ],
            options={
                'verbose_name': 'Challenge Participation',
                'verbose_name_plural': 'Challenge Participations',
                'ordering': ['-joined_at'],
                'unique_together': {('user_profile', 'challenge')},
            },
        ),
    ]
