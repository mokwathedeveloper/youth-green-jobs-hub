# Generated by Django 5.2.6 on 2025-09-18 15:04

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Product name', max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly product identifier', max_length=200)),
                ('description', models.TextField(help_text='Detailed product description')),
                ('short_description', models.CharField(help_text='Brief product summary for listings', max_length=300)),
                ('price', models.DecimalField(decimal_places=2, help_text='Product price in Kenyan Shillings (KSh)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('credit_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price in platform credits (if purchasable with credits)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='Current stock quantity available')),
                ('low_stock_threshold', models.PositiveIntegerField(default=5, help_text='Threshold for low stock alerts')),
                ('track_inventory', models.BooleanField(default=True, help_text='Whether to track inventory for this product')),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit identifier', max_length=50, null=True, unique=True)),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=3, help_text='Product weight in kilograms', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('dimensions', models.CharField(blank=True, help_text='Product dimensions (L x W x H in cm)', max_length=100, null=True)),
                ('eco_friendly_features', models.TextField(help_text='Environmental benefits and eco-friendly features')),
                ('materials', models.CharField(help_text='Materials used in product manufacturing', max_length=300)),
                ('recyclable', models.BooleanField(default=True, help_text='Whether the product is recyclable')),
                ('biodegradable', models.BooleanField(default=False, help_text='Whether the product is biodegradable')),
                ('carbon_footprint_kg', models.DecimalField(blank=True, decimal_places=3, help_text='Estimated carbon footprint in kg CO2', max_digits=8, null=True)),
                ('featured_image', models.ImageField(help_text='Main product image', upload_to='product_images/')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the product is active and visible')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this product prominently')),
                ('meta_title', models.CharField(blank=True, help_text='SEO meta title', max_length=200, null=True)),
                ('meta_description', models.CharField(blank=True, help_text='SEO meta description', max_length=300, null=True)),
                ('tags', models.CharField(blank=True, help_text='Product tags for search and filtering (comma-separated)', max_length=500, null=True)),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of times product has been viewed')),
                ('total_sales', models.PositiveIntegerField(default=0, help_text='Total number of units sold')),
                ('average_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Average customer rating (0-5 stars)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_number', models.CharField(help_text='Unique order identifier', max_length=20, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', help_text='Current order status', max_length=20)),
                ('payment_method', models.CharField(choices=[('credits', 'Platform Credits'), ('mpesa', 'M-Pesa'), ('bank_transfer', 'Bank Transfer'), ('cash_on_delivery', 'Cash on Delivery'), ('mixed', 'Mixed Payment')], help_text='Payment method used', max_length=20)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total order amount in KSh', max_digits=12)),
                ('credits_used', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount paid using platform credits', max_digits=10)),
                ('cash_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount paid in cash/other methods', max_digits=10)),
                ('delivery_address', models.TextField(help_text='Delivery address')),
                ('delivery_county', models.CharField(help_text='Delivery county', max_length=50)),
                ('delivery_sub_county', models.CharField(blank=True, help_text='Delivery sub-county', max_length=50, null=True)),
                ('delivery_phone', models.CharField(help_text='Delivery contact phone', max_length=15)),
                ('delivery_instructions', models.TextField(blank=True, help_text='Special delivery instructions', null=True)),
                ('tracking_number', models.CharField(blank=True, help_text='Shipping tracking number', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('shipped_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('customer_notes', models.TextField(blank=True, help_text='Customer notes or special requests', null=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Internal admin notes', null=True)),
                ('customer', models.ForeignKey(help_text='Customer who placed the order', on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(help_text='Quantity ordered', validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at time of order', max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price for this item (quantity Ã— unit_price)', max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(help_text='Order this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='products.order')),
                ('product', models.ForeignKey(help_text='Product being ordered', on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='products.product')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Category name', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly category identifier', max_length=100, unique=True)),
                ('description', models.TextField(help_text='Category description')),
                ('icon', models.CharField(blank=True, help_text="Icon name for UI display (e.g., 'leaf', 'recycle')", max_length=50, null=True)),
                ('image', models.ImageField(blank=True, help_text='Category banner image', null=True, upload_to='category_images/')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is active and visible')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Sort order for category display')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category for hierarchical organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='products.productcategory')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(help_text='Product category', on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.productcategory'),
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(help_text='Product image', upload_to='product_images/')),
                ('alt_text', models.CharField(help_text='Alternative text for accessibility', max_length=200)),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Sort order for image display')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(help_text='Product this image belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['sort_order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ShoppingCart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.OneToOneField(help_text='Customer who owns this cart', on_delete=django.db.models.deletion.CASCADE, related_name='shopping_cart', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Shopping Cart',
                'verbose_name_plural': 'Shopping Carts',
            },
        ),
        migrations.CreateModel(
            name='SMEVendor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('business_name', models.CharField(help_text='Official business name', max_length=200)),
                ('business_registration_number', models.CharField(blank=True, help_text='Official business registration number', max_length=50, null=True, unique=True)),
                ('business_type', models.CharField(choices=[('sole_proprietorship', 'Sole Proprietorship'), ('partnership', 'Partnership'), ('limited_company', 'Limited Company'), ('cooperative', 'Cooperative'), ('ngo', 'NGO/Non-Profit'), ('other', 'Other')], help_text='Type of business entity', max_length=50)),
                ('description', models.TextField(help_text='Business description and mission')),
                ('contact_email', models.EmailField(help_text='Business contact email', max_length=254)),
                ('contact_phone', models.CharField(help_text='Business contact phone number', max_length=15)),
                ('address', models.TextField(help_text='Physical business address')),
                ('county', models.CharField(default='Kisumu', help_text='County where business is located', max_length=50)),
                ('sub_county', models.CharField(blank=True, help_text='Sub-county or ward', max_length=50, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, help_text='Latitude coordinate for business location', max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, help_text='Longitude coordinate for business location', max_digits=11, null=True)),
                ('website', models.URLField(blank=True, help_text='Business website URL', null=True)),
                ('logo', models.ImageField(blank=True, help_text='Business logo image', null=True, upload_to='vendor_logos/')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the business has been verified by platform administrators')),
                ('verification_document', models.FileField(blank=True, help_text='Business registration or verification documents', null=True, upload_to='vendor_verification/')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the vendor is currently active on the platform')),
                ('eco_certifications', models.TextField(blank=True, help_text='Environmental certifications and credentials (comma-separated)', null=True)),
                ('sustainability_practices', models.TextField(blank=True, help_text='Description of sustainable business practices', null=True)),
                ('total_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total sales amount in KSh', max_digits=12)),
                ('total_orders', models.PositiveIntegerField(default=0, help_text='Total number of orders fulfilled')),
                ('average_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Average customer rating (0-5 stars)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(help_text='Primary business owner/contact person', on_delete=django.db.models.deletion.CASCADE, related_name='owned_businesses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SME Vendor',
                'verbose_name_plural': 'SME Vendors',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='vendor',
            field=models.ForeignKey(help_text='SME vendor selling this product', on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.smevendor'),
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(help_text='Review title', max_length=200)),
                ('comment', models.TextField(help_text='Detailed review comment')),
                ('is_verified_purchase', models.BooleanField(default=False, help_text='Whether this review is from a verified purchase')),
                ('is_approved', models.BooleanField(default=True, help_text='Whether the review is approved for display')),
                ('helpful_count', models.PositiveIntegerField(default=0, help_text='Number of users who found this review helpful')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(help_text='Customer who wrote the review', on_delete=django.db.models.deletion.CASCADE, related_name='product_reviews', to=settings.AUTH_USER_MODEL)),
                ('order_item', models.ForeignKey(blank=True, help_text='Order item this review is for (ensures verified purchase)', null=True, on_delete=django.db.models.deletion.CASCADE, to='products.orderitem')),
                ('product', models.ForeignKey(help_text='Product being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
                'ordering': ['-created_at'],
                'unique_together': {('product', 'customer')},
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(help_text='Quantity of this product in cart', validators=[django.core.validators.MinValueValidator(1)])),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(help_text='Product in the cart', on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('cart', models.ForeignKey(help_text='Shopping cart this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='products.shoppingcart')),
            ],
            options={
                'verbose_name': 'Cart Item',
                'verbose_name_plural': 'Cart Items',
                'ordering': ['-updated_at'],
                'unique_together': {('cart', 'product')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together={('vendor', 'slug')},
        ),
    ]
