# Generated by Django 5.2.6 on 2025-09-22 12:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import youth_green_jobs_backend.config
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number for contact and SMS notifications', max_length=15, null=True)),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth for age verification and youth eligibility', null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], help_text='Gender identity', max_length=20, null=True)),
                ('county', models.CharField(default=youth_green_jobs_backend.config.get_default_county, help_text='County in Kenya', max_length=50)),
                ('sub_county', models.CharField(blank=True, help_text='Sub-county or ward within the county', max_length=50, null=True)),
                ('address', models.TextField(blank=True, help_text='Physical address or location description', null=True)),
                ('education_level', models.CharField(blank=True, choices=[('primary', 'Primary Education'), ('secondary', 'Secondary Education'), ('tertiary', 'Tertiary/College'), ('university', 'University'), ('vocational', 'Vocational Training'), ('other', 'Other')], help_text='Highest level of education completed', max_length=20, null=True)),
                ('skills', models.TextField(blank=True, help_text='Skills and competencies (comma-separated)', null=True)),
                ('interests', models.TextField(blank=True, help_text='Areas of interest in green jobs and environmental work', null=True)),
                ('employment_status', models.CharField(choices=[('unemployed', 'Unemployed'), ('student', 'Student'), ('employed', 'Employed'), ('self_employed', 'Self-employed'), ('seeking_work', 'Seeking Work')], default='seeking_work', help_text='Current employment status', max_length=20)),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture for user identification', null=True, upload_to=youth_green_jobs_backend.config.profile_picture_upload_path)),
                ('bio', models.TextField(blank=True, help_text='Short biography or personal description', max_length=500, null=True)),
                ('is_verified', models.BooleanField(default=False, help_text="Whether the user's identity has been verified")),
                ('verification_document', models.FileField(blank=True, help_text='Identity document for verification (ID, passport, etc.)', null=True, upload_to=youth_green_jobs_backend.config.verification_document_upload_path)),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('sw', 'Swahili'), ('luo', 'Luo')], default='en', help_text='Preferred language for communication', max_length=10)),
                ('receive_sms_notifications', models.BooleanField(default=True, help_text='Whether to receive SMS notifications about opportunities')),
                ('receive_email_notifications', models.BooleanField(default=True, help_text='Whether to receive email notifications')),
                ('profile_completed_at', models.DateTimeField(blank=True, help_text='When the user completed their profile', null=True)),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Last time the user was active on the platform')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
